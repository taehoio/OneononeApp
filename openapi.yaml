openapi: 3.0.2

servers:
  - url: 'https://1on1.taeho.io/api/v1'
    description: Production server
  - url: 'http://localhost:3000/api/v1'
    description: Local server

info:
  description: >-
    Hassle-free 1on1 questions.
  version: 1.0.0
  title: 1on1
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'

tags:
  - name: categories
    description: Operations about categories
  - name: questions
    description: Operations about questions

paths:
  /:
    head:
      summary: Get API status
      description: >-
        Get API status.
      operationId: headApiStatus
      responses:
        '200':
          description: successful operation
        '500':
          description: Internal server error

    get:
      summary: Get API status
      description: >-
        Get API status.
      operationId: getApiStatus
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '500':
          description: Internal server error

  /categories:
    get:
      tags:
        - categories
      summary: Get all categories
      description: >-
        Get all categories.
      operationId: getCategories
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error

  /categories/{category_id}/questions:
    get:
      tags:
        - categories
      summary: Get all questions for a category
      description: >-
        Get all questions for a category.
      operationId: getCategoryQuestions
      parameters:
        - name: category_id
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Question'
        '500':
          description: Internal server error

  /categories/{category_id}/questions/random:
    get:
      tags:
        - categories
        - questions
      summary: Get a random question for a category
      description: >-
        Get a random question for a category.
      operationId: getCategoryRandomQuestion
      parameters:
        - name: category_id
          in: path
          description: ID of category to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  question:
                    $ref: '#/components/schemas/Question'
        '400':
          description: Invalid category ID supplied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Internal server error

  /questions/{question_id}:
    get:
      tags:
        - questions
      summary: Get a question
      description: >-
        Get a question.
      operationId: getQuestion
      parameters:
        - name: question_id
          in: path
          description: ID of question to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  question:
                    $ref: '#/components/schemas/Question'
        '400':
          description: Invalid question ID supplied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Internal server error

  /questions/random:
    get:
      tags:
        - questions
      summary: Get a random question
      description: >-
        Get a random question.
      operationId: getRandomQuestion
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  question:
                    $ref: '#/components/schemas/Question'
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Internal server error

components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      required:
        - id
        - name
    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
        question:
          type: string
      required:
        - id
        - question
